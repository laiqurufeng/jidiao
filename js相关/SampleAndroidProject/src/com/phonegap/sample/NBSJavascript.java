package com.phonegap.sample;

import android.annotation.SuppressLint;
import android.content.Context;
import android.util.Base64;
import android.webkit.JavascriptInterface;
import android.webkit.WebView;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Iterator;

import com.splunk.mint.Mint;
import org.json.JSONObject;

public class NBSJavascript {
	private Context context;
	private WebView webview;
	private static String tracekitBase64 = "";

	private static String mintBase64 = "dmFyIE1pbnQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3JldHVybiJ1c2VyQWdlbnQiaW4gd2luZG93Lm5hdmlnYXRvcj8tMT09d2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZigiQW5kcm9pZCIpP3Q6Im9iamVjdCI9PXR5cGVvZiB0P0pTT04uc3RyaW5naWZ5KHQpOnZvaWQgMD09PXR8fG51bGw9PT10PyJ7fSI6SlNPTi5zdHJpbmdpZnkoe2Vycm9yOiJOb3QgYSB2YWxpZCBhcmd1bWVudC4gT25seSBKU09OIG9iamVjdCBhbGxvd2VkLiJ9KTpudWxsfXZhciBuPWZ1bmN0aW9uKHQsbil7dmFyIGk9dC5zdGFjay5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuZnVuYysiQCIrdC51cmwrIjoiK3QubGluZX0pLmpvaW4oIlxuIik7bWludEJyaWRnZS5qYXZhc2NyaXB0RXJyb3IodC5tZXNzYWdlLHQudXJsLHQuc3RhY2tbMF0ubGluZSxpLG4pfSxpPXdpbmRvdy5UcmFjZUtpdC5yZXBvcnQsZT1mdW5jdGlvbigpe3ZhciB0PVhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuLG49WE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnNlbmQ7WE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9wZW49ZnVuY3Rpb24obixpLGUsbyxyKXt0aGlzLl9tZXRob2Q9bix0aGlzLl91cmw9aSx0LmNhbGwodGhpcyxuLGksZSxvLHIpfSxYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZD1mdW5jdGlvbih0KXtmdW5jdGlvbiBpKCl7aWYoND09by5yZWFkeVN0YXRlKXt2YXIgdD0obmV3IERhdGUpLmdldFRpbWUoKSxuPXQtZSxpPXttZXRob2Q6cix1cmw6YSxsYXRlbmN5Om4udG9TdHJpbmcoKSxodHRwU3RhdHVzQ29kZTpvLnN0YXR1cy50b1N0cmluZygpLHJlc3BvbnNlRGF0YVNpemU6by5yZXNwb25zZVRleHQubGVuZ3RofTttaW50QnJpZGdlLmxvZ05ldHdvcmsoaS5tZXRob2QsaS51cmwsaS5sYXRlbmN5LGkuaHR0cFN0YXR1c0NvZGUsaS5yZXNwb25zZURhdGFTaXplKX19dmFyIGUsbz10aGlzLHI9dGhpcy5fbWV0aG9kLGE9dGhpcy5fdXJsO2U9KG5ldyBEYXRlKS5nZXRUaW1lKCksdGhpcy5hZGRFdmVudExpc3RlbmVyKCJyZWFkeXN0YXRlY2hhbmdlIixpLCExKSxuLmNhbGwodGhpcyx0KX19LG89ZnVuY3Rpb24oKXt7dmFyIHQ9d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLG49d2luZG93LmxvY2F0aW9uLmhvc3Q7d2luZG93LmxvY2F0aW9uLnByb3RvY29sfXNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgaT13aW5kb3cucGVyZm9ybWFuY2UudGltaW5nLmxvYWRFdmVudEVuZC13aW5kb3cucGVyZm9ybWFuY2UudGltaW5nLm5hdmlnYXRpb25TdGFydCxlPXdpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcuZG9tYWluTG9va3VwRW5kLXdpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcuZG9tYWluTG9va3VwU3RhcnQsbz13aW5kb3cucGVyZm9ybWFuY2UudGltaW5nLmRvbUNvbXBsZXRlLXdpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcuZG9tTG9hZGluZyxyPXdpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcucmVzcG9uc2VFbmQtd2luZG93LnBlcmZvcm1hbmNlLnRpbWluZy5yZXNwb25zZVN0YXJ0O21pbnRCcmlkZ2UubG9nVmlldyh0LGksZSxyLG8sbixudWxsKX0sMCl9O3JldHVybiBlKCksaS5zdWJzY3JpYmUoZnVuY3Rpb24odCl7dmFyIGk9InN0YWNrIj09PXQubW9kZT8idHJ1ZSI6ImZhbHNlIjtuKHQsaSl9KSx3aW5kb3cub25sb2FkPW8se2Vycm9yTG9nZ2VyOmksaW5pdEFuZFN0YXJ0U2Vzc2lvbjpmdW5jdGlvbih0KXttaW50QnJpZGdlLmluaXRBbmRTdGFydFNlc3Npb24odCl9LGxvZ0V2ZW50OmZ1bmN0aW9uKG4saSl7bWludEJyaWRnZS5sb2dFdmVudChuLHQoaSkpfSxsZWF2ZUJyZWFkY3J1bWI6ZnVuY3Rpb24odCl7bWludEJyaWRnZS5sZWF2ZUJyZWFkY3J1bWIodCl9LHRyYW5zYWN0aW9uU3RhcnQ6ZnVuY3Rpb24obixpKXttaW50QnJpZGdlLnRyYW5zYWN0aW9uU3RhcnQobix0KGkpKX0sdHJhbnNhY3Rpb25TdG9wOmZ1bmN0aW9uKG4saSl7bWludEJyaWRnZS50cmFuc2FjdGlvblN0b3Aobix0KGkpKX0sdHJhbnNhY3Rpb25DYW5jZWw6ZnVuY3Rpb24obixpLGUpe21pbnRCcmlkZ2UudHJhbnNhY3Rpb25DYW5jZWwobixpLHQoZSkpfSxhZGRFeHRyYURhdGE6ZnVuY3Rpb24odCxuKXttaW50QnJpZGdlLmFkZEV4dHJhRGF0YSh0LG4pfSxjbGVhckV4dHJhRGF0YTpmdW5jdGlvbigpe21pbnRCcmlkZ2UuY2xlYXJFeHRyYURhdGEoKX0sZmx1c2g6ZnVuY3Rpb24oKXtyZXR1cm4gbWludEJyaWRnZS5mbHVzaCgpfSxzdGFydFNlc3Npb246ZnVuY3Rpb24oKXttaW50QnJpZGdlLnN0YXJ0U2Vzc2lvbigpfSxjbG9zZVNlc3Npb246ZnVuY3Rpb24oKXttaW50QnJpZGdlLmNsb3NlU2Vzc2lvbigpfSxsb2dWaWV3OmZ1bmN0aW9uKG4saSl7bWludEJyaWRnZS5sb2dWaWV3KG4sbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLHQoaSkpfSxzZXRVc2VySWRlbnRpZmllcjpmdW5jdGlvbih0KXttaW50QnJpZGdlLnNldFVzZXJJZGVudGlmaWVyKHQpfX19KCk7";

	private HashMap<String, Object> jExtraData = new HashMap(1);

	@SuppressLint({ "NewApi" })
	public static String loadMintJavascript() {
		StringBuilder sb = new StringBuilder();

		sb.append("javascript:");
		try {
			byte[] data = Base64.decode(tracekitBase64, 0);

			String tracekit = new String(data, "UTF-8");
			sb.append(tracekit);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		try {
			byte[] data = Base64.decode(mintBase64, 0);

			String mint = new String(data, "UTF-8");
			sb.append(mint);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		return sb.toString();
	}

	public NBSJavascript(Context context, WebView webView) {
		this.context = context;
		this.webview = webView;
		this.jExtraData.put("webview", Boolean.valueOf(true));
	}

	@JavascriptInterface
	public void javascriptError(final String message, final String file, final String line, final String stacktrace,
			final String handled) {

		CustomLog.d( "javascriptError," + "line:" + line + ", stacktrace:" + stacktrace);
		new Thread(new Runnable() {
			public void run() {
/*				EnumExceptionType excType = EnumExceptionType.UNHANDLED;
				if ((handled != null) && (handled.toLowerCase().contains("true"))) {
					excType = EnumExceptionType.HANDLED;
				}

				ActionError actErr = new ActionError(EnumActionType.error, message, file, line, stacktrace,
						MintJavascript.this.jExtraData, excType);
				actErr.save(new DataSaver());*/
			}
		}).start();
	}

	@JavascriptInterface
	public void logNetwork(String method, String url, String latency, String httpStatusCode, String responseDataSize) {
		CustomLog.d( "logNetwork method:" + method + "url:" + url + ", latency:" + latency + ", httpstatuscode:" + httpStatusCode);
/*		NetLogManager.getInstance().logNetworkRequest(url, method,
				System.currentTimeMillis() - Long.valueOf(latency).longValue(), System.currentTimeMillis(),
				Integer.valueOf(httpStatusCode).intValue(), 0L, Long.valueOf(responseDataSize).longValue(), "",
				this.jExtraData);*/
	}

	@JavascriptInterface
	public void initAndStartSession(String apikey) {
		Mint.initAndStartSession(this.context, apikey);
	}

	@JavascriptInterface
	public void addExtraData(String key, String value) {
//		Mint.addExtraData(key, value);
	}

	@JavascriptInterface
	public void clearExtraData() {
//		Mint.clearExtraData();
	}

	@JavascriptInterface
	public void closeSession() {
//		Mint.closeSession(this.context);
	}

	@JavascriptInterface
	public void flush() {
//		Mint.flush();
	}

	@JavascriptInterface
	public void leaveBreadcrumb(String breadcrumb) {
//		Mint.leaveBreadcrumb(breadcrumb);
	}

	@JavascriptInterface
	public void logEvent(String event, String jsonExtra) {
		HashMap extraData = JsonStringToExtraData(jsonExtra);
		extraData.putAll(this.jExtraData);
//		Mint.logEvent(event, MintLogLevel.Info, extraData);
	}

	@JavascriptInterface
	public void removeExtraData(String key) {
//		Mint.removeExtraData(key);
	}

	@JavascriptInterface
	public void setLogging(int lines, String filter) {
//		Mint.setLogging(lines, filter);
	}

	@JavascriptInterface
	public void setUserIdentifier(String userIdentifier) {
//		Mint.setUserIdentifier(userIdentifier);
	}

	@JavascriptInterface
	public void startSession() {
//		Mint.startSession(this.context);
	}

	@JavascriptInterface
	public void transactionStart(String name, String jsonExtra) {
		HashMap extraData = JsonStringToExtraData(jsonExtra);
		extraData.putAll(this.jExtraData);
//		Mint.transactionStart(name, extraData);
	}

	@JavascriptInterface
	public void transactionStop(String name, String jsonExtra) {
		HashMap extraData = JsonStringToExtraData(jsonExtra);
		extraData.putAll(this.jExtraData);
//		Mint.transactionStop(name, extraData);
	}

	@JavascriptInterface
	public void transactionCancel(String name, String reason, String jsonExtra) {
		 HashMap extraData = JsonStringToExtraData(jsonExtra);
		extraData.putAll(this.jExtraData);
//		Mint.transactionCancel(name, reason, extraData);
	}

	@JavascriptInterface
	public void logView(String currentView, String loadTime, String domainLookupTime, String serverTime,
			String domProcessingTime, String host, String jsonExtra) {
		 HashMap<String, Object> extraData = new HashMap<String, Object>(2);
		 extraData.put("webview", Boolean.valueOf(true));
		extraData.putAll(JsonStringToExtraData(jsonExtra));
		Integer loadTimeInt = Integer.valueOf(loadTime);
		Integer domainLookupTimeInt = Integer.valueOf(domainLookupTime);
		Integer serverTimeInt = Integer.valueOf(serverTime);
		Integer domProcessingTimeInt = Integer.valueOf(domProcessingTime);

//		ActionView.logView(currentView, domainLookupTimeInt, domProcessingTimeInt, serverTimeInt, host,
//				loadTimeInt, extraData);
	}

	private static synchronized HashMap<String, Object> JsonStringToExtraData(String jsontext) {
		HashMap<String, Object> extraData = new HashMap<String, Object>(2);
		if ((jsontext == null) || (jsontext.length() <= 4) || (jsontext.equals("undefined")))
			return extraData;
		try {
			JSONObject jObj = new JSONObject(jsontext);

			Iterator<String> keysItr = jObj.keys();
			while (keysItr.hasNext()) {
				String key = (String) keysItr.next();
				Object value = jObj.get(key);
				extraData.put(key, value);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return extraData;
	}
}